/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import java.io.File;
import java.io.FilenameFilter;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import classificador.*;
import java.awt.Component;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.JButton;
import javax.swing.JTable;
import javax.swing.table.TableCellRenderer;
/**
 *
 * @author jorge
 */
public class Interface extends javax.swing.JFrame {

    private String paDocuments [][];
    private String psDirectory;
    private Classificador poClassificador;
    private int pnTotalDocuments = 0;
    /**
     * Creates new form Interface
     */
    public Interface() {
        initComponents();
        this.mxFormatTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        cmbSelFil = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblListFiles = new javax.swing.JTable();
        cmbExit = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        cmbTraining = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        spnFolds = new javax.swing.JSpinner();
        pgbProgress = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Classificador de textos");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        cmbSelFil.setText("Select FIles");
        cmbSelFil.setToolTipText("");
        cmbSelFil.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                cmbSelFilMousePressed(evt);
            }
        });

        tblListFiles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tblListFiles);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbSelFil, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(cmbSelFil)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        cmbExit.setText("Exit");
        cmbExit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                cmbExitMousePressed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        cmbTraining.setText("Training");
        cmbTraining.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                cmbTrainingMousePressed(evt);
            }
        });

        jLabel1.setText("Cross Validation");

        jLabel2.setText("NÂ° Folds:");

        pgbProgress.setStringPainted(true);
        pgbProgress.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                pgbProgressStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addComponent(spnFolds, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cmbTraining, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(pgbProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(75, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(spnFolds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbTraining))
                .addGap(18, 18, 18)
                .addComponent(pgbProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbExit, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cmbExit)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbSelFilMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbSelFilMousePressed
        // TODO add your handling code here:
        this.mxSelectFiles();
    }//GEN-LAST:event_cmbSelFilMousePressed

    private void cmbExitMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbExitMousePressed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_cmbExitMousePressed

    private void cmbTrainingMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbTrainingMousePressed
        // TODO add your handling code here:
        this.mxStartTraining();
    }//GEN-LAST:event_cmbTrainingMousePressed

    private void pgbProgressStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_pgbProgressStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_pgbProgressStateChanged
  
    
    public void mxFormatTable()
    {
        this.tblListFiles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "Class", "# Documents", "SelectFiles"
            }
        ) {
        Class[] types = new Class [] {
            java.lang.String.class, java.lang.Integer.class, JButton.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        
        // El objetivo de la siguiente lÃ­nea es indicar el CellRenderer que serÃ¡ utilizado para dibujar el botÃ³n
        tblListFiles.setDefaultRenderer(JButton.class, new TableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable jtable, Object objeto, boolean estaSeleccionado, boolean tieneElFoco, int fila, int columna) {
                return (Component) objeto;
            }
        });
        
        this.tblListFiles.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int lnRow = tblListFiles.rowAtPoint(e.getPoint());
                int lnColumn = tblListFiles.columnAtPoint(e.getPoint());

                if (tblListFiles.getModel().getColumnClass(lnColumn).equals(JButton.class)) 
                {
                    for (int i = 0; i < tblListFiles.getModel().getColumnCount(); i++) 
                    {
                        if (tblListFiles.getModel().getColumnName(i).equals("Class")) 
                        {
                            String lsPath = psDirectory + tblListFiles.getModel().getValueAt(lnRow, i);
                            String laDocuments[] = mxGetDocuments(lsPath);
                            mxSaveDocumentsSelected(laDocuments, lnRow);
                        }
                    }
                }
            }
        });
    }
    
    private void mxSaveDocumentsSelected(String[] taDocuments, int tnClass)
    {
        this.tblListFiles.setValueAt(taDocuments.length, tnClass, 1);
        this.paDocuments[tnClass] = taDocuments;
    }
    
    private String[] mxGetDocuments(String tsPath)
    {
        File loFolder = new File(tsPath);
        SelectFiles loForm = new SelectFiles(this, true, loFolder);
        loForm.setVisible(true);
        loForm.setLocationRelativeTo(this);
        return loForm.mxGetDocumentsSelected();
    }
    
    private void mxSelectFiles()
    {
        JFileChooser loFileChooser = new JFileChooser();
        File laFolderSelected[], laListFiles[];
        FilenameFilter loNameFilter;
        int result = 0;
        
        loFileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        loFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        loFileChooser.setMultiSelectionEnabled(true);
        loFileChooser.setAcceptAllFileFilterUsed(false);
        
        result = loFileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) 
        {
            laFolderSelected = loFileChooser.getSelectedFiles();
            loNameFilter = new FilenameFilter() 
            {   
                @Override
                public boolean accept(File dir, String name) 
                {
                    if(name.lastIndexOf('.') > 0)
                    {
                        int lastIndex = name.lastIndexOf('.');
                        String str = name.substring(lastIndex);
                        return str.equals(".txt");
                    }
                   return false;
                }
            };
            
            this.paDocuments = new String[laFolderSelected.length][];
            
            for(File loFolderSelected : laFolderSelected)
            {
                this.psDirectory = loFolderSelected.getParentFile().getPath() + "/";                
                if (loFolderSelected.isDirectory())
                    ((DefaultTableModel)this.tblListFiles.getModel()).addRow(new Object[]{loFolderSelected.getName(), loFolderSelected.listFiles(loNameFilter).length, new JButton("Select Files")});
            }
        }
    }
    
    private void mxStartTraining()
    {
        DefaultTableModel loModelList = (DefaultTableModel)this.tblListFiles.getModel();
        String laClasses[];
        int lnNumFiles = loModelList.getRowCount();
        
        laClasses = new String[lnNumFiles];
        
        //Load classes
        for(int i = 0; i < lnNumFiles; i++)
        {
            laClasses[i] = loModelList.getValueAt(i, 0).toString();
            this.pnTotalDocuments += Integer.parseInt(loModelList.getValueAt(i, 1).toString());
        }
        
        this.poClassificador = new Classificador(laClasses);
        
        
        new Thread(){
            @Override
            public void run()
            {
                mxLearnNaiveBayesText(0, 0);                
                JOptionPane.showMessageDialog(null, "Training Complete!");
            }                            
        }.start();        
    }
    
    private void mxLearnNaiveBayesText(int tnBeginTeste, int tnEndTeste)
    {
        int lnNumDocs = 0, lnNumClasses = this.paDocuments.length;
        
        this.mxCollectWords();
        
        System.out.println("Collect words complete!");
        
        for(int i = 0; i < lnNumClasses; i++)
        {
            lnNumDocs = this.paDocuments[i].length;
            //Class Probability 
            this.poClassificador.setProbaClass(i, (float)lnNumDocs/(float)this.poClassificador.getNumDocs());
            
            this.poClassificador.mxCalculateProbabilityTerms(i);            
        }
        this.pgbProgress.setValue(100);
    }
    
    private void mxCollectWords()
    {
        int lnNumDoc = 0, lnNumClasses = this.paDocuments.length, lnCont = 0;
        
        for(int i = 0; i < lnNumClasses; i++)
        {
            lnNumDoc = this.paDocuments[i].length;
            for(int j = 0; j < lnNumDoc; j++)
            {
                this.poClassificador.mxAddDocument(this.paDocuments[i][j], i);
                int lnValue = (int)(95 * lnCont / this.pnTotalDocuments);
                
                if(lnValue % 3 == 0)
                {                    
                    this.pgbProgress.setValue(lnValue);
                }
                lnCont++;
            }            
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmbExit;
    private javax.swing.JButton cmbSelFil;
    private javax.swing.JButton cmbTraining;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JProgressBar pgbProgress;
    private javax.swing.JSpinner spnFolds;
    private javax.swing.JTable tblListFiles;
    // End of variables declaration//GEN-END:variables
}
